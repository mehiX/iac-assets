image: golang:latest

#
# GitLab Build Pipeline
#
# Predefined GitLab variables see https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
#
include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - test
  - build
  - deploy

variables:
  REGISTRY_SERVER_AZ1: harbor.cicd-p-az1.l12m.nl
  REGISTRY_SERVER_AZ2: harbor.cicd-p-az2.l12m.nl
  REGISTRY_PROJECT: "dgp"
  IMAGE_NAME: "launchpad/iac-assets" 
  TAG: "0.3"
  NAMESPACE: "launchpad"
  KANIKO_VERSION: "v1.6.0"

format:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

compile:
  stage: build
  script:
    - mkdir -p dist
    - go build -o dist/iac ./main.go
  artifacts:
    paths:
      - dist

build-image:
  # https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:${KANIKO_VERSION}-debug
    entrypoint: [""]
#  only:
#    changes:
#      - Dockerfile
#      - "**/*.go"
#      - "cmd/tmpl/*.tmpl"
  script:
    # Provide Harbor and GitLab registry authorization 
    - printf '{"auths":{ 
        "%s":{"username":"%s","password":"%s"}, 
        "%s":{"username":"%s","password":"%s"}, 
        "%s":{"username":"%s","password":"%s"}
        }}' 
        $REGISTRY_SERVER_AZ1 $HARBOR_ROBOT_NAME_AZ1 $(echo -n "$HARBOR_ROBOT_SECRET_AZ1" | base64 -d)
        $REGISTRY_SERVER_AZ2 $HARBOR_ROBOT_NAME_AZ2 $(echo -n "$HARBOR_ROBOT_SECRET_AZ2" | base64 -d)
        $CI_REGISTRY $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD
        > /kaniko/.docker/config.json
    
    # Run Kaniko (caching layers in GitLab registry, final image in Harbor)
    - /kaniko/executor 
      --build-arg HTTP_PROXY=$https_proxy 
      --build-arg HTTPS_PROXY=$https_proxy 
      --cache 
      --cache-repo $CI_REGISTRY/$CI_PROJECT_PATH 
      --context $CI_PROJECT_DIR 
      --destination "${REGISTRY_SERVER_AZ1}/${REGISTRY_PROJECT}/${IMAGE_NAME}:${TAG}"
      --destination "${REGISTRY_SERVER_AZ2}/${REGISTRY_PROJECT}/${IMAGE_NAME}:${TAG}"
      --dockerfile $CI_PROJECT_DIR/Dockerfile 
      --single-snapshot

.prepare:
  image: safenetlabs/k8s-cicd:1.0.11-22
  stage: deploy
  script: 
    - |
      kubectl get ns ${NAMESPACE} || kubectl create -f - <<EOF
      apiVersion: v1
      kind: Namespace
      metadata:
        annotations:
          field.cattle.io/projectId: $(kubectl get ns dgp-ot-services -o jsonpath='{.metadata.annotations.field\.cattle\.io\/projectId}')
          field.cattle.io/resourceQuota: '{"limit":{"limitsCpu":"200m","limitsMemory":"2000Mi","requestsCpu":"150m","requestsMemory":"41000Mi","requestsStorage":"1Gi"}}'
        name: ${NAMESPACE}
      EOF

.deploy:
  image: alpine/helm:latest
  stage: deploy
  before_script:
    - echo "Custom variables file:${CUSTOM_VARS_FILE}"
    - echo "Namespace:${NAMESPACE}"
  script:
    - |
      helm upgrade -i iac-assets ./k8s/iac-assets \
      -f ${CUSTOM_VARS_FILE}  \
      --set image.repository=${IMAGE_REPO} \
      --set image.tag=${TAG} \
      --namespace=${NAMESPACE}

prepare-az1:
  stage: deploy
  environment: ot-t-az1.dgp-ot
  extends:
    - .prepare

deploy-ot1:
  stage: deploy
  needs: ["prepare-az1"]
  variables:
    CUSTOM_VARS_FILE: ./k8s/values-ot-t-az1.yaml
    IMAGE_REPO: ${REGISTRY_SERVER_AZ1}/${REGISTRY_PROJECT}/${IMAGE_NAME}
  environment: ot-t-az1.dgp-ot
  extends: 
    - .deploy 
